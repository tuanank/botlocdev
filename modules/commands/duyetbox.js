module.exports.config = {
	name: "duyetbox",
	version: "1.0.2",
	hasPermssion: 3,
	credits: "DungUwU mod by Nam",
	description: "Duy·ªát box d√πng bot xD",
	commandCategory: "H·ªá th·ªëng admin-bot",
    cooldowns: 5
};


const dataPath = __dirname + "/cache/approvedThreads.json";
const dataPending = __dirname + "/cache/pendingThreads.json";
const fs = require("fs");

module.exports.onLoad = () => {
  const fs = require("fs-extra");
    const request = require("request");
    const dirMaterial = __dirname + `/cache/`;
  if (!fs.existsSync(dirMaterial + "cache")) fs.mkdirSync(dirMaterial, { recursive: true });
  if (!fs.existsSync(dirMaterial + "biaadmin.mp4")) request("https://i.imgur.com/5AcfvTx.mp4").pipe(fs.createWriteStream(dirMaterial + "biaadmin.mp4"));
	if (!fs.existsSync(dataPath)) fs.writeFileSync(dataPath, JSON.stringify([]));
  if (!fs.existsSync(dataPending)) fs.writeFileSync(dataPending, JSON.stringify([]));
}
module.exports.handleReply = async function ({ event, api, Currencies, handleReply, Users, args }) {
    if (handleReply.author != event.senderID) return;
    const { body, threadID, messageID, senderID } = event;
    const { type } = handleReply;
    let data = JSON.parse(fs.readFileSync(dataPath));
    let dataP = JSON.parse(fs.readFileSync(dataPending));
    let idBox = (args[0]) ? args[0] : threadID;
  switch (type) {
        case "pending": {
          switch (body) {
                case `A`: {
   			data.push(idBox);
   			fs.writeFileSync(dataPath, JSON.stringify(data, null, 2));
   			api.sendMessage(`[‚öúÔ∏è] ‚ûú Ph√™ duy·ªát th√†nh c√¥ng box:\n${idBox}`, threadID, () => {
          dataP.splice(dataP.indexOf(idBox), 1);
    		fs.writeFileSync(dataPending, JSON.stringify(dataP, null, 2));
    	}, messageID)
        }
        }
      }
    }
  }
module.exports.run = async function ({ event, api, args, Threads, Users, handleReply, permssion  }) {
	const { threadID, messageID, senderID } = event;
  if (permssion != 3) return api.sendMessage( `[DONATE] ‚ûú Momo/Mbbank: 0396049649. Xin c√°m ∆°n ·∫°!! ‚ù§Ô∏è`, event.threadID, event.messageID)
  const axios = require("axios")
  const fs = require('fs-extra');
  const request = require('request')
	let data = JSON.parse(fs.readFileSync(dataPath));
  let dataP = JSON.parse(fs.readFileSync(dataPending));
  let msg = "";
  var lydo = args.splice(2).join(" ");
  let idBox = (args[0]) ? args[0] : threadID;
        if (args[0] == "list" || args[0] == "l") {
    	msg = `[‚öúÔ∏è]=== „Äé APPROVED GROUP LIST ${data.length} „Äè ===[‚öúÔ∏è]\n‚óÜ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚óÜ\n`;
    	let count = 0;
    	for (e of data) {
        let threadInfo = await api.getThreadInfo(e);
          let threadName = threadInfo.threadName ? threadInfo.threadName : await Users.getNameUser(e);
    		msg += `\n\n[${count+=1}] ‚ûú ${threadName}\n[‚öúÔ∏è] ‚ûú ID: ${e}`;
    	}
    	api.sendMessage(msg, threadID, (error, info) => {
        global.client.handleReply.push({
            name: this.config.name,
            messageID: info.messageID,
            author: event.senderID,
            type: "a",
        })
    }, messageID);
        }
     else if (args[0] == "pending" || args[0] == "p") {
    	msg = `[‚öúÔ∏è]=== „Äé UNAPPROVED GROUP LIST ${dataP.length} „Äè ===[‚öúÔ∏è]\n‚óÜ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚óÜ\n`;
    	let count = 0;
    	for (e of dataP) {
        let threadInfo = await api.getThreadInfo(e);
          let threadName = threadInfo.threadName ? threadInfo.threadName : await Users.getNameUser(e);
    		msg += `\n\n[${count+=1}] ‚ûú ${threadName}\n[‚öúÔ∏è] ‚ûú ID: ${e}`;
    	}
    	api.sendMessage(msg, threadID, (error, info) => {
        global.client.handleReply.push({
            name: this.config.name,
            messageID: info.messageID,
            author: event.senderID,
            type: "pending",
        })
    }, messageID);
     }
       else if (args[0] == "help" || args[0] == "h") {
         const tst = (await Threads.getData(String(event.threadID))).data || {};
  const pb = (tst.hasOwnProperty("PREFIX")) ? tst.PREFIX : global.config.PREFIX;
  const nmdl = this.config.name
  const cre = this.config.credits
        return api.sendMessage(`[‚öúÔ∏è]=== „Äé APPROVED „Äè ===[‚öúÔ∏è]\n‚óÜ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚óÜ\n\n${pb}${nmdl} l/list => xem danh s√°ch box ƒë∆∞·ª£c duy·ªát\n\n${pb}${nmdl} p/pending => xem danh s√°ch box ch∆∞a duy·ªát\n\n${pb}${nmdl} d/del => k√®m theo ID ƒë·ªÉ x√≥a kh·ªèi danh s√°ch ƒë∆∞·ª£c d√πng bot\n\n${pb}${nmdl} => k√®m theo ID ƒë·ªÉ duy·ªát box ƒë√≥\n\n‚áí ${cre} ‚áê`, threadID, messageID);
       }
      
    else if (args[0] == "del" || args[0] == "d") {
    	idBox = (args[1]) ? args[1] : event.threadID;
      if (isNaN(parseInt(idBox))) return api.sendMessage("[‚öúÔ∏è] ‚ûú Kh√¥ng ph·∫£i m·ªôt con s·ªë", threadID, messageID);
    	if (!data.includes(idBox)) return api.sendMessage("[‚öúÔ∏è] ‚ûú Box kh√¥ng ƒë∆∞·ª£c duy·ªát t·ª´ tr∆∞·ªõc!", threadID, messageID);
      api.sendMessage(`[‚öúÔ∏è] ‚ûú Nh√≥m b·∫°n ƒë√£ b·ªã admin g·ª° kh·ªèi danh s√°ch duy·ªát v·ªõi l√Ω do: ${lydo}`, idBox);
    	api.sendMessage(`[‚öúÔ∏è] ‚ûú Box ƒë√£ b·ªã g·ª° kh·ªèi danh s√°ch ƒë∆∞·ª£c ph√©p d√πng bot`, threadID, () => {
    		data.splice(data.indexOf(idBox), 1);
    		fs.writeFileSync(dataPath, JSON.stringify(data, null, 2));
    	}, messageID)
    }
    else if (isNaN(parseInt(idBox))) api.sendMessage("[‚öúÔ∏è] ‚ûú ID b·∫°n nh·∫≠p kh√¥ng h·ª£p l·ªá", threadID, messageID);
    else if (data.includes(idBox)) api.sendMessage(`[‚öúÔ∏è] ‚ûú ID ${idBox} ƒë√£ ƒë∆∞·ª£c ph√™ duy·ªát t·ª´ tr∆∞·ªõc!`, threadID, messageID);
   	else api.sendMessage("[‚öúÔ∏è] ‚ûú Nh√≥m b·∫°n ƒë√£ ƒë∆∞·ª£c admin ph√™ duy·ªát", idBox, (error, info) => {
   		api.changeNickname(`„Äé ${global.config.PREFIX} „Äè‚ûú ${(!global.config.BOTNAME) ? "Bot c·ªßa JRT <3" : global.config.BOTNAME}`, idBox, global.data.botID);
      axios.get('https://docs-api.jrtxtracy.repl.co/images/anime?apikey=JRTvip_2200708248').then(res => {
	let ext = res.data.data.substring(res.data.data.lastIndexOf(".") + 1);
	let callback = function () {
      api.sendMessage({body: `‚ñÇ‚ñÉ‚ñÖ‚ñÜùêãùê®ùêöùêùùê¢ùêßùê†...ùüèùüéùüé%‚ñÜ‚ñÖ‚ñÉ‚ñÇ\n‚´∏ ùë≤ùíÜÃÇÃÅùíï ùíèùíêÃÇÃÅùíä ùíïùíâùíÇÃÄùíèùíâ ùíÑùíêÃÇùíèùíà ‚´∑\n‚óè‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‡πë‚á©‚á©‡πë‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚óè\n[‚öúÔ∏è] === ùìõùìæùì™Ã£ÃÇùìΩ ùìëùì∏ùìΩ ùìôùì°ùì£ === [‚öúÔ∏è]\n[‚öúÔ∏è] ‚ûú ùêªùëéÃ£ùëõ ùëê‚ÑéùëíÃÇÃÅ ùë†ùëùùëéùëö\[‚öúÔ∏è] ‚ûú ùêÉùêöùêßùê° ùê¨√°ùêúùê° ùê•·ªáùêßùê° ${global.config.PREFIX}help v√† ${global.config.PREFIX}menu\n‚óè‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‡πë‚áß‚áß‡πë‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚óè\n‚ùõ‚îÅ‚îÅÔΩ•‚ù™ ùë∑ùíìùíÜùíáùíäùíô [ ${global.config.PREFIX} ]‚ù´ÔΩ•‚îÅ‚îÅ‚ùú\n[‚öúÔ∏è] ‚ûú ùëãùëíùëö ùë°‚ÑéùëúÃÇùëõùëî ùë°ùëñùëõ ùê¥ùê∑ùëÄùêºùëÅùêµùëÇùëá: ${global.config.PREFIX}ad\n[‚öúÔ∏è] ‚ûú ùë¥ùíêÃ£ùíä ùíïùíâùíÇÃÜÃÅùíÑ ùíéùíÇÃÜÃÅùíÑ ùíçùíäùíÜÃÇùíè ùíâùíÜÃ£ÃÇ ùíÇùíÖùíéùíäùíè: https://www.facebook.com/NHD.JRT.262\n‚óÜ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚óÜ\n[‚öúÔ∏è] ‚ûú ùêìùê°ùê¢ùê¨ ùêõùê®ùê≠ ùê¶ùêöùêùùêû ùêõùê≤ ${global.config.BOTNAME}. ùêìùê°ùêöùêßùê§ ùê≤ùê®ùêÆ ùêüùê®ùê´ ùêÆùê¨ùê¢ùêßùê†\n[¬©] ‚ûú ùô∞ùöçùöñùöíùöó: ùôΩùöêùöûùö¢ùöéÃÇÃÉùöó ùô∑ùöäÃâùöí ƒêùöäÃÜùöóùöê `, attachment: fs.createReadStream(__dirname + `/cache/duyet.${ext}`)
					}, event.threadID,() => fs.unlinkSync(__dirname + `/cache/duyet.${ext}`), event.messageID, idBox);
				};
				request(res.data.data).pipe(fs.createWriteStream(__dirname + `/cache/duyet.${ext}`)).on("close", callback);
			}) 
   		if (error) return api.sendMessage("[‚öúÔ∏è] ‚ûú ƒê√£ c√≥ l·ªói x·∫£y ra, ƒë·∫£m b·∫£o r·∫±ng id b·∫°n nh·∫≠p h·ª£p l·ªá v√† bot ƒëang ·ªü trong box!", threadID, messageID);
   		else {
   			data.push(idBox);
   			fs.writeFileSync(dataPath, JSON.stringify(data, null, 2));
   			api.sendMessage(`[‚öúÔ∏è] ‚ûú Ph√™ duy·ªát th√†nh c√¥ng box:\n${idBox}`, threadID, () => {
          dataP.splice(dataP.indexOf(idBox), 1);
    		fs.writeFileSync(dataPending, JSON.stringify(dataP, null, 2));
    	}, messageID)
        }
   	});
      }