module.exports.config = {
	name: 'member',
	version: '1.1.1',
	hasPermssion: 1,
	credits: 'NTKhang',
	description: 'Xem ai kh√¥ng chat trong th·ªùi gian ƒë√£ ƒë·ªãnh tr∆∞·ªõc',
	commandCategory: 'H·ªá th·ªëng qu·∫£n tr·ªã vi√™n',
	usages: '<s·ªë ng√†y>: Xem ai kh√¥ng chat trong <s·ªë ng√†y> g·∫ßn ƒë√¢y',
	cooldowns: 2
};

const fs = require('fs-extra');
const dir = __dirname + '/noprefix/notInteract';
if (!fs.existsSync(dir))
	fs.mkdirSync(dir, { recursive: true });
if (!global.notInteractInterval)
	global.notInteractInterval = {};
if (!global.notInteractSetTimeOut)
	global.notInteractSetTimeOut = {};

const sleep = (ms) => new Promise(resolve => setTimeout(resolve, ms));
const defaultDelayKick = 5 * 1000; // 5s

const allThreads = fs.readdirSync(dir);
for (const fileName of allThreads) {
	const threadID = fileName.replace('.json', '');
	setUpInterval(threadID);
}

function filterData(fileName) {
	const readFile = fs.readFileSync(`${dir}/${fileName}`);
	const jsonData = JSON.parse(readFile);

	const dayNumber = jsonData.dayNumber;
	const currentDayInYear = getDayOfYear();
	const filter = jsonData.data.filter(item => item.day >= currentDayInYear - dayNumber);
	jsonData.data = filter;
	fs.writeFileSync(`${dir}/${fileName}`, JSON.stringify(jsonData));
}

function setUpInterval(threadID) {
	if (!global.notInteractSetTimeOut[threadID]) {
		if (!global.notInteractInterval[threadID]) {
			filterData(threadID + '.json');
			// settimeout to 24h in current day
			// get 24h in current day
			const currentDay = new Date().getDate();
			const currentMonth = new Date().getMonth();
			const currentYear = new Date().getFullYear();
			const nextDayInMs = new Date(currentYear, currentMonth, currentDay + 1).getTime();
			const delay = nextDayInMs - Date.now();

			global.notInteractSetTimeOut[threadID] = setTimeout(() => {
				global.notInteractInterval[threadID] = setInterval(() => {
					filterData(threadID);

				}, 1000 * 60 * 60 * 24);
			}, delay);
		}
	}
}

module.exports.handleEvent = async function ({ api, event }) {
	const pathData = `${dir}/${event.threadID}.json`;
	if (!fs.existsSync(pathData)) {
		fs.writeFileSync(pathData, JSON.stringify({
			dayNumber: 1,
			data: []
		}));
		setUpInterval(event.threadID);
	}

	const oldData = fs.readFileSync(pathData);
	const jsonData = JSON.parse(oldData);
	const data = jsonData.data;
	const currentDayInYear = getDayOfYear();

	if (!data.find(item => item.day == currentDayInYear))
		data.push({
			day: currentDayInYear,
			members: [event.senderID]
		});
	else {
		const index = data.findIndex(item => item.day == currentDayInYear);
		const members = data[index].members;
		if (!members.find(item => item == event.senderID))
			members.push(event.senderID);
	}

	fs.writeFileSync(pathData, JSON.stringify(jsonData));
};

module.exports.handleReply = async function ({ api, event, handleReply }) {
	if (handleReply.author != event.senderID)
		return;
	const args = event.body.split(/\s+/);
	if (args[0] == 'all') {
		const success = [];
		const fail = [];

		const threadInfo = await api.getThreadInfo(event.threadID);
		if (threadInfo.adminIDs.find(item => item.id == api.getCurrentUserID()) == undefined)
			return api.sendMessage('[‚öúÔ∏è] ‚ûú ùóïùóºùòÅ ùó∞ùóÆÃÇÃÄùóª ùó§ùóßùó© ùó∞ùóµùóº ùòÉùó∂ùó≤Ã£ÃÇùó∞ ùóπùóºÃ£ùó∞ ùó∫ùó≤ùó∫, ùòÉùòÇùó∂ ùóπùóºÃÄùóªùó¥ ùó∞ùóÆÃÇÃÅùóΩ ùóæùòÅùòÉ ùóøùóºÃÇÃÄùó∂ ùòÅùóµùòÇÃõÃâ ùóπùóÆÃ£ùó∂ ùòÄùóÆùòÇ ùóªùóµùó≤ÃÅ üíï', event.threadID, event.messageID);

		for (const member of handleReply.data) {
			try {
				await api.removeUserFromGroup(member.id, event.threadID);
				success.push(member);
				await sleep(defaultDelayKick);
			}
			catch (e) {
				fail.push(member);
			}
		}
		return api.sendMessage(`[‚öúÔ∏è] ‚ûú ùóßùóµùòÇÃõÃ£ùó∞ ùòÅùóµùó∂ ùòÖùóºùóÆÃÅ ùòÅùóµùóÆÃÄùóªùóµ ùó∞ùóºÃÇùóªùó¥ ${success.length} ùòÅùóµùóÆÃÄùóªùóµ ùòÉùó∂ùó≤ÃÇùóª\n${fail.length > 0 ? `[‚öúÔ∏è] ‚ûú ùóûùóµùóºÃÇùóªùó¥ ùòÅùóµùó≤ÃÇÃâ ùòÖùóºÃÅùóÆ ${fail.length} ùòÅùóµùóÆÃÄùóªùóµ ùòÉùó∂ùó≤ÃÇùóª: ${fail.map(item => item.name).join(', ')}` : ''}`, event.threadID, event.messageID);
	}
	else {
		const indexs = args.filter(item => !isNaN(item) && parseInt(item) >= 1 && parseInt(item) <= handleReply.data.length);
		if (indexs.length == 0)
			return api.sendMessage('[‚öúÔ∏è] ‚ûú ùóûùóµùóºÃÇùóªùó¥ ùó∞ùóºÃÅ ùòÅùóµùóÆÃÄùóªùóµ ùòÉùó∂ùó≤ÃÇùóª ùóªùóÆÃÄùóº ùóØùó∂Ã£ ùó∞ùóµùóºÃ£ùóª', event.threadID, event.messageID);

		const threadInfo = await api.getThreadInfo(event.threadID);
		if (threadInfo.adminIDs.find(item => item.id == api.getCurrentUserID()) == undefined)
			return api.sendMessage('[‚öúÔ∏è] ‚ûú ùóïùóºùòÅ ùó∞ùóÆÃÇÃÄùóª ùó§ùóßùó© ùó∞ùóµùóº ùòÉùó∂ùó≤Ã£ÃÇùó∞ ùóπùóºÃ£ùó∞ ùó∫ùó≤ùó∫, ùòÉùòÇùó∂ ùóπùóºÃÄùóªùó¥ ùó∞ùóÆÃÇÃÅùóΩ ùóæùòÅùòÉ ùóøùóºÃÇÃÄùó∂ ùòÅùóµùòÇÃõÃâ ùóπùóÆÃ£ùó∂ ùòÄùóÆùòÇ ùóªùóµùó≤ÃÅ üíï', event.threadID, event.messageID);

		const success = [];
		const fail = [];
		for (const ind of indexs) {
			const index = parseInt(ind) - 1;
			try {
				await api.removeUserFromGroup(handleReply.data[index].id, event.threadID);
				success.push(handleReply.data[index]);
				await sleep(defaultDelayKick);
			}
			catch (e) {
				fail.push(handleReply.data[index]);
			}
		}
		return api.sendMessage(`[‚öúÔ∏è] ‚ûú ùóßùóµùòÇÃõÃ£ùó∞ ùòÅùóµùó∂ ùòÖùóºùóÆÃÅ ùòÅùóµùóÆÃÄùóªùóµ ùó∞ùóºÃÇùóªùó¥ ${success.length} ùòÅùóµùóÆÃÄùóªùóµ ùòÉùó∂ùó≤ÃÇùóª\n${fail.length > 0 ? `[‚öúÔ∏è] ‚ûú ùóûùóµùóºÃÇùóªùó¥ ùòÅùóµùó≤ÃÇÃâ ùòÖùóºÃÅùóÆ ${fail.length} ùòÅùóµùóÆÃÄùóªùóµ ùòÉùó∂ùó≤ÃÇùóª: ${fail.map(item => item.name).join(', ')}` : ''}`, event.threadID, event.messageID);
	}
};

module.exports.run = async function ({
	api, event, args, permssion
}) {
	if (args[0] == 'set') {
		const day = parseInt(args[1]) || 1;
		if (isNaN(day))
			return api.sendMessage('[‚öúÔ∏è] ‚ûú ùó¶ùóºÃÇÃÅ ùóªùó¥ùóÆÃÄùòÜ ùó∏ùóµùóºÃÇùóªùó¥ ùóµùóºÃõÃ£ùóΩ ùóπùó≤Ã£ÃÇ', event.threadID, event.messageID);
		const pathData = `${dir}/${event.threadID}.json`;
		if (!fs.existsSync(pathData))
			fs.writeFileSync(pathData, JSON.stringify({
				dayNumber: day,
				data: []
			}));
		else {
			const jsonData = JSON.parse(fs.readFileSync(pathData, 'utf-8'));
			jsonData.dayNumber = day;
			fs.writeFileSync(pathData, JSON.stringify(jsonData));
		}

		return api.sendMessage(`[‚öúÔ∏è] ‚ûú ùóßùóµùó∂ùó≤ÃÇÃÅùòÅ ùóπùóÆÃ£ÃÇùóΩ ùòÅùóµùóÆÃÄùóªùóµ ùó∞ùóºÃÇùóªùó¥`, event.threadID, event.messageID);
	}
	else {
		const jsonData = JSON.parse(fs.readFileSync(`${dir}/${event.threadID}.json`, 'utf-8'));
		const dayNumber = jsonData.dayNumber;
		const data = jsonData.data;
		const currentDayInYear = getDayOfYear();

		const members = [];
		for (const item of data) {
			if (item.day >= currentDayInYear - dayNumber)
				for (const member of item.members)
					if (!members.find(item => item == member))
						members.push(member);
		}

		const threadInfo = await api.getThreadInfo(event.threadID);
		const threadMembers = threadInfo.userInfo;

		const notInteract = [];
		for (const member of threadMembers) {
			if (!members.find(item => item == member.id))
				notInteract.push({
					name: member.name,
					id: member.id
				});
		}

		let msg = `üå∏ ùóñùóÆÃÅùó∞ ùòÅùóµùóÆÃÄùóªùóµ ùòÉùó∂ùó≤ÃÇùóª ùó∏ùóµùóºÃÇùóªùó¥ ùòÅùòÇÃõùóºÃõùóªùó¥ ùòÅùóÆÃÅùó∞ ùòÅùóøùóºùóªùó¥ ${dayNumber} ùóªùó¥ùóÆÃÄùòÜ ùòÉùòÇÃõÃÄùóÆ ùóæùòÇùóÆ:\n\n`;
		// for (const member of notInteract)
		// 	msg += `‚Ä¢ ${member.name} (${member.id})\n`;
		notInteract.forEach((member, index) => msg += `${index + 1}. ${member.name}\nùóúùóó:  ${member.id}\n`);

		return api.sendMessage(msg + (threadInfo.adminIDs.some(i => i.id == event.senderID) || permssion > 1 ? '\n[üëâ] ‚ûú ùó£ùóµùóÆÃâùóª ùóµùóºÃÇÃÄùó∂ `ùóÆùóπùóπ` ùóµùóºùóÆÃ£ÃÜùó∞ ùòÄùóºÃÇÃÅ ùòÅùóµùòÇÃõÃÅ ùòÅùòÇÃõÃ£ ùóªùó≤ÃÇÃÅùòÇ ùòÖùóºÃÅùóÆ ùòÅùóµùóÆÃÄùóªùóµ ùòÉùó∂ùó≤ÃÇùóª ( ùòÖùóºÃÅùóÆ ùóªùóµùó∂ùó≤ÃÇÃÄùòÇ ùòÅùóµùóÆÃÄùóªùóµ ùòÉùó∂ùó≤ÃÇùóª ùóØùóÆÃÜÃÄùóªùó¥ ùó±ùóÆÃÇÃÅùòÇ ùó∞ùóÆÃÅùó∞ùóµ )' : ''), event.threadID, (error, info) => {
			if (error) return console.log(error);
			if (threadInfo.adminIDs.some(i => i.id == event.senderID) || permssion > 1)
				global.client.handleReply.push({
					name: this.config.name,
					messageID: info.messageID,
					data: notInteract,
					author: event.senderID,
				});
		}, event.messageID);
	}
};

function getDayOfYear(date = new Date()) {
	const timestamp1 = Date.UTC(
		date.getFullYear(),
		date.getMonth(),
		date.getDate()
	);
	const timestamp2 = Date.UTC(date.getFullYear(), 0, 0);
	const differenceInMilliseconds = timestamp1 - timestamp2;
	const differenceInDays = differenceInMilliseconds / 1000 / 60 / 60 / 24;
	return differenceInDays;
}
